package ca.mcgill.ecse321.boardr.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import ca.mcgill.ecse321.boardr.dto.BorrowRequest.BorrowRequestCreationDTO;
import ca.mcgill.ecse321.boardr.dto.BorrowRequest.BorrowRequestResponseDTO;
import ca.mcgill.ecse321.boardr.model.BorrowRequest;
import ca.mcgill.ecse321.boardr.service.BorrowRequestService;

import java.util.List;
import java.util.stream.Collectors;

@RestController
public class BorrowRequestController {
    @Autowired
    private BorrowRequestService borrowRequestService;

    /**
     * Create a new borrow request.
     *
     * @param borrowRequestToCreate The borrow request to create
     * @return The created borrow request, including its autogenerated ID
     */
    @PostMapping("/borrowRequests")
    @ResponseStatus(HttpStatus.CREATED)
    public BorrowRequestResponseDTO createBorrowRequest(@RequestBody BorrowRequestCreationDTO borrowRequestToCreate) {
        BorrowRequest createdBorrowRequest = borrowRequestService.createBorrowRequest(borrowRequestToCreate);
        return new BorrowRequestResponseDTO(createdBorrowRequest);
    }

    /**
     * Find a specific borrow request by ID.
     *
     * @param borrowRequestId The primary key of the borrow request to find
     * @return The borrow request with that ID
     */
    @GetMapping("/borrowRequests/{borrowRequestId}")
    public BorrowRequestResponseDTO getBorrowRequestById(@PathVariable int borrowRequestId) {
        BorrowRequest borrowRequest = borrowRequestService.getBorrowRequestById(borrowRequestId);
        return new BorrowRequestResponseDTO(borrowRequest);
    }

    /**
     * Get all borrow requests.
     *
     * @return A list of all borrow requests
     */
    @GetMapping("/borrowRequests")
    public List<BorrowRequestResponseDTO> getAllBorrowRequests() {
        return borrowRequestService.getAllBorrowRequests().stream()
                .map(BorrowRequestResponseDTO::new)
                .collect(Collectors.toList());
    }

    /**
     * Delete a borrow request.
     *
     * @param borrowRequestId The primary key of the borrow request to delete
     */
    @DeleteMapping("/borrowRequests/{borrowRequestId}")
    public void deleteBorrowRequest(@PathVariable int borrowRequestId) {
        borrowRequestService.deleteBorrowRequest(borrowRequestId);
    }
}
