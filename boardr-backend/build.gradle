plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'ca.mcgill.ecse321'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.github.cdimascio:dotenv-java:3.0.0'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    useJUnitPlatform()
    // Include only integration tests
    include '**/*IntegrationTest.class'
    // Ensure test classes are compiled
    classpath = sourceSets.test.runtimeClasspath
    // Run after unit tests (optional)
    mustRunAfter test
}

jacoco {
    toolVersion = "0.8.11" // Compatible with Java 17
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true  // For CI tools like Jenkins
        html.required = true // For human-readable report
        csv.required = false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                // Exclude test classes and non-business logic
                '**/integration/**',
                '**/dto/**',
                '**/model/**',
                '**/repo/**',
                '**/config/**',
                '**/controller/**',
                '**/exceptions/**',
                '**/BoardrApplication.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.8 // Enforce 80% line coverage (adjust as needed)
            }
        }
    }
}
